function run_code_script(){
    let text = document.getElementById("run-input").value
    document.getElementById("try-to-run-body").innerHTML = `
  <div class="d-flex justify-content-center align-items-center" style="min-height:300px">
    <div class="spinner-border" role="status">
    </div>
    <span style="margin-left:10px">Loading...</span>
  </div>
    `
    document.getElementById("try-to-run-btn").style.display = "none";
    let code = window.editor.getValue()
    let regex = document.getElementById("regex-input").value
    if(regex == ""){
      text = text.split("\n");
      regex = null
      for(let i=0;i<text.length;i++){
        text[i] = btoa(text[i])
      }
    }else{
      text = btoa(text)
    }
    let multiple_sub = document.getElementById("multiple-flags").checked
    let max_submit = 1
    if (multiple_sub){
      max_submit = Number(document.getElementById("multiple-flag-max-submit").value)
      if (isNaN(max_submit)){
        set_run_code_error("Multiple flag option is activate, please insert a valid value for max submissions!")
      }
    }
    let duplicated_flags = document.getElementById("duplicated-flags").checked
  
    let request = {
      "type":"flag_submit_test",
      "text":text,
      "code":code,
      "regex":regex,
      "multiple_submit":multiple_sub,
      "max_submit":max_submit,
      "duplicate":duplicated_flags
    }
  
    engine_request(request)
      .then( data => {
        data = data.data
        if (data.status){
          set_run_code_success(data.result[0],data.result[1])
        }else{
          set_run_code_error(data.error)
        }
      })
      .catch( err => {
        set_run_code_error(err)
      })
  }
  
  function set_run_code_init(){
    modify_modal(`
      <div class="modal fade" id="try-to-run" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="try-to-runLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="try-to-runLabel">Try to execute the flag submission ðŸš©</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="try-to-run-body">
  
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
              <button type="button" class="btn btn-success" id="try-to-run-btn" onclick="run_code_script()"><i class="fas fa-play"></i></button>
            </div>
          </div>
        </div>
      </div>
    `)
    document.getElementById("try-to-run-btn").style.display = "";
    document.getElementById("try-to-run-body").innerHTML = `
    <div class="alert alert-success" role="alert">
      Try to run the code for submit flags, the output generated by the execution will be sended here.
      Insert here the flag or the flags (separated with new lines). if the regex is setted all the input will be filtered using that.
    </div>
    <div class="input-group">
      <span class="input-group-text">Submit Input</span>
      <textarea class="form-control" style="height: 300px;" id="run-input"></textarea>
    </div>
    `
  
    var myModal = new bootstrap.Modal(document.getElementById('try-to-run'))
    myModal.show()
  }
  
  function set_run_code_error(text){
    document.getElementById("try-to-run-btn").style.display = "none";
    document.getElementById("try-to-run-body").innerHTML = `
    <h3><u>An error occurred during the submit</u></h3>
    <h5>Message:</h5>
    <div class="alert alert-danger" id="try-to-run-inner-alert" role="alert">
      
    </div>
    `
    document.getElementById("try-to-run-inner-alert").innerText = text
  }
  function set_run_code_success(status, output){
    document.getElementById("try-to-run-btn").style.display = "none";
    let additional_html = ""
    if (status == "FAILED"){
      additional_html = `
      <div class="alert alert-warning"role="alert">
        In a real situation the flag will be sended next possible time 
      </div>
      `
    }else if (status == "INVALID"){
      additional_html = `
      <div class="alert alert-warning"role="alert">
        In a real situation the flag won't be sended
      </div>
      `
    }
    document.getElementById("try-to-run-body").innerHTML = `
    <h2 id="status-try-to-run"></h2>
    ${additional_html}
    <h4>Generated output</h4>
    <pre class="alert alert-primary" id="try-to-run-inner-alert" role="alert">
    </pre>
  `
  document.getElementById("status-try-to-run").innerText = `Flag status: ${status}`
  document.getElementById("try-to-run-inner-alert").innerText = output
}

function pip_install_init(){
    modify_modal(`
    <div class="modal fade" id="pip-install" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="pip-installLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="pip-installLabel">Install additional libs with pip ðŸ“š</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body" id="pip-install-body">
          
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          <button type="button" class="btn btn-warning" id="pip-install-btn" onclick="pip_install_script()">Install</button>
        </div>
      </div>
    </div>
  </div>
    `)

    document.getElementById("pip-install-btn").style.display = "";
    document.getElementById("pip-install-body").innerHTML = `
    <div class="alert alert-warning" role="alert">
    Insert here the list of the libraries to install with pip (using python3, separate the libs with a space on a new line).
    You can also specify the version using the syntax used in pip command
    </div>
    <div class="input-group">
    <span class="input-group-text">Modules list from pip</span>
    <textarea class="form-control" style="height: 300px;" id="pip-install-input"></textarea>
    </div>
    `

    var myModal = new bootstrap.Modal(document.getElementById('pip-install'))
    myModal.show()

  }

function pip_install_script(){
    let text = document.getElementById("pip-install-input").value
    document.getElementById("pip-install-body").innerHTML = `
  <div class="d-flex justify-content-center align-items-center" style="min-height:300px">
    <div class="spinner-border" role="status">
    </div>
    <span style="margin-left:10px">Loading...</span>
  </div>
    `
    document.getElementById("pip-install-btn").style.display = "none";
    let request = {
      "type":"pip_install",
      "libs":text
    }
  
    engine_request(request)
      .then( data => {
        data = data.data
        if (data[0]){
            set_pip_install_success(data[1])
        }else{
            set_pip_install_error(data[1])
        }
      })
      .catch( err => {
        set_pip_install_error(err)
      })
}

function set_pip_install_success(text){
    document.getElementById("pip-install-btn").style.display = "none";
    document.getElementById("pip-install-body").innerHTML = `
    <h3><u>Modules installed successfully!</u></h3>
    <h5>Message:</h5>
    <pre class="alert alert-primary" id="pip-install-inner-alert" role="alert"></pre>`
    document.getElementById("pip-install-inner-alert").innerText = text
}

function set_pip_install_error(text){
    document.getElementById("pip-install-btn").style.display = "none";
    document.getElementById("pip-install-body").innerHTML = `
    <h3><u>An error occurred during the installation of the modules</u></h3>
    <h5>Message:</h5>
    <pre class="alert alert-danger" id="pip-install-inner-alert" role="alert"></pre>`
    document.getElementById("pip-install-inner-alert").innerText = text
  }